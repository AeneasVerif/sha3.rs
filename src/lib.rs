#![feature(random)]
pub mod algos;
pub mod shars;
pub mod simple;

pub fn get_vec_of_bits(s: &str) -> Vec<bool> {
    let mut res = vec![];
    for byte in s.as_bytes() {
        for i in 0..8 {
            res.push((byte >> i) & 1 == 1);
        }
    }
    return res;
}

pub fn hex_of_vec_of_bits(s: &[bool]) -> String {
    s.chunks(8)
     .map(|chunk| {
            let mut byte = 0u8;
            for i in 0..8 {
                byte *= 2;
                byte += chunk[7-i] as u8;
            }
            return format!("{:02x?}",byte);
        })
     .collect()
}

#[cfg(test)]
mod test {
    use super::*;

    #[test]
    fn test_hex(){
        let input = [true, false, false, false, false, true, true, false];
        let expected = "61";
        let actual = hex_of_vec_of_bits(&input);
        assert_eq!(expected, actual);

        let input = [true, false, false, false, false, true, true, false, false, true, false, false, false, true, true, false];
        let expected = "6162";
        let actual = hex_of_vec_of_bits(&input);
        assert_eq!(expected, actual);

        let input = [true, false, false, false, false, true, true, false, false, true, false, false, false, true, true, false, true, true, false, false, false, true, true, false, false, false, true, false, false, true, true, false, true, false, true, false, false, true, true, false, false, true, true, false, false, true, true, false, true, true, true, false, false, true, true, false, false, false, false, true, false, true, true, false, true, false, false, true, false, true, true, false];
        let expected = "616263646566676869";
        let actual = hex_of_vec_of_bits(&input);
        assert_eq!(expected, actual);

        let input = [true, false, false, false, false, true, true, false, false, true, false, false, false, true, true, false, true, true, false, false, false, true, true, false, false, false, true, false, false, true, true, false, true, false, true, false, false, true, true, false, false, true, true, false, false, true, true, false, true, true, true, false, false, true, true, false, false, false, false, true, false, true, true, false, true, false, false, true, false, true, true, false, false, true, false, true, false, true, true, false, true, true, false, true, false, true, true, false, false, false, true, true, false, true, true, false, true, false, true, true, false, true, true, false, false, true, true, true, false, true, true, false, true, true, true, true, false, true, true, false, false, false, false, false, true, true, true, false, true, false, false, false, true, true, true, false, false, true, false, false, true, true, true, false, true, true, false, false, true, true, true, false, false, false, true, false, true, true, true, false, true, false, true, false, true, true, true, false, false, true, true, false, true, true, true, false, true, true, true, false, true, true, true, false, false, false, false, true, true, true, true, false, true, false, false, true, true, true, true, false, false, true, false, true, true, true, true, false];
        let expected = "6162636465666768696a6b6c6d6e6f707172737475767778797a";
        let actual = hex_of_vec_of_bits(&input);
        assert_eq!(expected, actual);

        let input = [true, false, false, false, false, true, true, false, false, true, false, false, false, true, true, false, true, true, false, false, false, true, true, false, false, false, true, false, false, true, true, false, true, false, true, false, false, true, true, false, false, true, true, false, false, true, true, false, true, true, true, false, false, true, true, false, false, false, false, true, false, true, true, false, true, false, false, true, false, true, true, false, false, true, false, true, false, true, true, false, true, true, false, true, false, true, true, false, false, false, true, true, false, true, true, false, true, false, true, true, false, true, true, false, false, true, true, true, false, true, true, false, true, true, true, true, false, true, true, false, false, false, false, false, true, true, true, false, true, false, false, false, true, true, true, false, false, true, false, false, true, true, true, false, true, true, false, false, true, true, true, false, false, false, true, false, true, true, true, false, true, false, true, false, true, true, true, false, false, true, true, false, true, true, true, false, true, true, true, false, true, true, true, false, false, false, false, true, true, true, true, false, true, false, false, true, true, true, true, false, false, true, false, true, true, true, true, false, true, false, false, false, false, false, true, false, false, true, false, false, false, false, true, false, true, true, false, false, false, false, true, false, false, false, true, false, false, false, true, false, true, false, true, false, false, false, true, false, false, true, true, false, false, false, true, false, true, true, true, false, false, false, true, false, false, false, false, true, false, false, true, false, true, false, false, true, false, false, true, false, false, true, false, true, false, false, true, false, true, true, false, true, false, false, true, false, false, false, true, true, false, false, true, false, true, false, true, true, false, false, true, false, false, true, true, true, false, false, true, false, true, true, true, true, false, false, true, false, false, false, false, false, true, false, true, false, true, false, false, false, true, false, true, false, false, true, false, false, true, false, true, false, true, true, false, false, true, false, true, false, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, true, true, false, true, false, true, false, true, true, true, false, true, false, true, false, false, false, false, true, true, false, true, false, true, false, false, true, true, false, true, false, false, true, false, true, true, false, true, false];
        let expected = "6162636465666768696a6b6c6d6e6f707172737475767778797a4142434445464748494a4b4c4d4e4f505152535455565758595a";
        let actual = hex_of_vec_of_bits(&input);
        assert_eq!(expected, actual);

        let input = [true, false, false, false, false, true, true, false, false, true, false, false, false, true, true, false, true, true, false, false, false, true, true, false, false, false, true, false, false, true, true, false, true, false, true, false, false, true, true, false, false, true, true, false, false, true, true, false, true, true, true, false, false, true, true, false, false, false, false, true, false, true, true, false, true, false, false, true, false, true, true, false, false, true, false, true, false, true, true, false, true, true, false, true, false, true, true, false, false, false, true, true, false, true, true, false, true, false, true, true, false, true, true, false, false, true, true, true, false, true, true, false, true, true, true, true, false, true, true, false, false, false, false, false, true, true, true, false, true, false, false, false, true, true, true, false, false, true, false, false, true, true, true, false, true, true, false, false, true, true, true, false, false, false, true, false, true, true, true, false, true, false, true, false, true, true, true, false, false, true, true, false, true, true, true, false, true, true, true, false, true, true, true, false, false, false, false, true, true, true, true, false, true, false, false, true, true, true, true, false, false, true, false, true, true, true, true, false, false, false, false, false, true, true, false, false, true, false, false, false, true, true, false, false, false, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, false, false, true, false, true, true, false, false, true, false, true, false, true, true, false, false, false, true, true, false, true, true, false, false, true, true, true, false, true, true, false, false, false, false, false, true, true, true, false, false, true, false, false, true, true, true, false, false, true, false, false, false, false, false, true, false, false, true, false, false, false, false, true, false, true, true, false, false, false, false, true, false, false, false, true, false, false, false, true, false, true, false, true, false, false, false, true, false, false, true, true, false, false, false, true, false, true, true, true, false, false, false, true, false, false, false, false, true, false, false, true, false, true, false, false, true, false, false, true, false, false, true, false, true, false, false, true, false, true, true, false, true, false, false, true, false, false, false, true, true, false, false, true, false, true, false, true, true, false, false, true, false, false, true, true, true, false, false, true, false, true, true, true, true, false, false, true, false, false, false, false, false, true, false, true, false, true, false, false, false, true, false, true, false, false, true, false, false, true, false, true, false, true, true, false, false, true, false, true, false, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, true, true, false, true, false, true, false, true, true, true, false, true, false, true, false, false, false, false, true, true, false, true, false, true, false, false, true, true, false, true, false, false, true, false, true, true, false, true, false];
        let expected = "6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738394142434445464748494a4b4c4d4e4f505152535455565758595a";
        let actual = hex_of_vec_of_bits(&input);
        assert_eq!(expected, actual);

        let input = [false, false, true, true, false, false, true, false, true, false, true, false, false, true, true, false, true, false, false, false, false, true, true, false, false, true, true, true, false, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, false, false, true, false, true, false, true, false, false, true, true, false, true, false, false, false, false, true, true, false, false, true, true, true, false, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, false, false, true, false, true, false, true, false, false, true, true, false, true, false, false, false, false, true, true, false, false, true, true, true, false, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, false, false, true, false, true, false, true, false, false, true, true, false, true, false, false, false, false, true, true, false, false, true, true, true, false, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, false, false, true, false, true, false, true, false, false, true, true, false, true, false, false, false, false, true, true, false, false, true, true, true, false, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, false, false, true, false, true, false, true, false, false, true, true, false, true, false, false, false, false, true, true, false, false, true, true, true, false, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, false, false, true, false, true, false, true, false, false, true, true, false, true, false, false, false, false, true, true, false, false, true, true, true, false, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, false, false, true, false, true, false, true, false, false, true, true, false, true, false, false, false, false, true, true, false, false, true, true, true, false, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, false, false, true, false, true, false, true, false, false, true, true, false, true, false, false, false, false, true, true, false, false, true, true, true, false, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, false, false, true, false, true, false, true, false, false, true, true, false, true, false, false, false, false, true, true, false, false, true, true, true, false, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, false, false, true, false, true, false, true, false, false, true, true, false, true, false, false, false, false, true, true, false, false, true, true, true, false, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false];
        let expected = "4c65616e000000004c65616e000000000000000000000000000000000000000098cac2dc0000000000000000000000004c65616e000000000000000000000000000000000000000098cac2dc0000000000000000000000004c65616e000000000000000000000000000000000000000098cac2dc0000000000000000000000004c65616e000000000000000000000000000000000000000098cac2dc0000000000000000000000004c65616e000000000000000000000000000000000000000098cac2dc00000000";
        let actual = hex_of_vec_of_bits(&input);
        assert_eq!(expected, actual);
    }
}


